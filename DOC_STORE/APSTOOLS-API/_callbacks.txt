Callbacks
*********

Receive *documents* from the bluesky RunEngine. File Writers are a
specialized type of callback.

-[ Callbacks ]-

+------------+--------------------------------------------------------------------------------------------+
| "Document  | Bluesky callback to collect *all* documents from most-recent plan                          |
| Collector  |                                                                                            |
| Callback"  |                                                                                            |
+------------+--------------------------------------------------------------------------------------------+
| "document  | prints document contents -- use for diagnosing a document stream                           |
| _contents  |                                                                                            |
| _callback" |                                                                                            |
+------------+--------------------------------------------------------------------------------------------+
| "SignalSt  | Callback: Collect peak (& other) statistics during a scan.                                 |
| atsCallba  |                                                                                            |
| ck"        |                                                                                            |
+------------+--------------------------------------------------------------------------------------------+

-[ File Writing Callbacks ]-

+------------+--------------------------------------------------------------------------------------------+
| "NXWriter  | Customize "NXWriter" with APS-specific content.                                            |
| APS"(*arg  |                                                                                            |
| s,         |                                                                                            |
| **kwargs)  |                                                                                            |
+------------+--------------------------------------------------------------------------------------------+
| "NXWriter  | General class for writing HDF5/NeXus file (using only NeXus base classes).                 |
| "(*args,   |                                                                                            |
| **kwargs)  |                                                                                            |
+------------+--------------------------------------------------------------------------------------------+
| "SpecWrit  | **Deprecated**: Use "SpecWriterCallback2".                                                 |
| erCallbac  |                                                                                            |
| k"([filen  |                                                                                            |
| ame, auto  |                                                                                            |
| _write,    |                                                                                            |
| ...])      |                                                                                            |
+------------+--------------------------------------------------------------------------------------------+
| "SpecWrit  | Write SPEC data file as data is collected, line-by-line.                                   |
| erCallbac  |                                                                                            |
| k2"(*args, |                                                                                            |
| **kwargs)  |                                                                                            |
+------------+--------------------------------------------------------------------------------------------+


Document Collector
==================

+------------+--------------------------------------------------------------------------------------------+
| "Document  | Bluesky callback to collect *all* documents from most-recent plan                          |
| Collector  |                                                                                            |
| Callback"  |                                                                                            |
| ()         |                                                                                            |
+------------+--------------------------------------------------------------------------------------------+
| "document  | prints document contents -- use for diagnosing a document stream                           |
| _contents  |                                                                                            |
| _callback  |                                                                                            |
| "(key,     |                                                                                            |
| doc)       |                                                                                            |
+------------+--------------------------------------------------------------------------------------------+

class apstools.callbacks.doc_collector.DocumentCollectorCallback

   Bluesky callback to collect *all* documents from most-recent plan

   Will reset when it receives a *start* document.

   EXAMPLE:

      from apstools.callbacks import DocumentCollectorCallback
      doc_collector = DocumentCollectorCallback()
      RE.subscribe(doc_collector.receiver)
      ...
      RE(some_plan())
      print(doc_collector.uids)
      print(doc_collector.documents["stop"])

   receiver(key, document)

      keep all documents from recent plan in memory

apstools.callbacks.doc_collector.document_contents_callback(key, doc)

   prints document contents -- use for diagnosing a document stream


Collect statistics on the signals used in 1-D scans.
====================================================

+------------+--------------------------------------------------------------------------------------------+
| "factor_f  | FWHM =2\sqrt{2\ln{2}}\cdot\sigma_c                                                         |
| whm"       |                                                                                            |
+------------+--------------------------------------------------------------------------------------------+
| "SignalSt  | Callback: Collect peak (& other) statistics during a scan.                                 |
| atsCallba  |                                                                                            |
| ck"()      |                                                                                            |
+------------+--------------------------------------------------------------------------------------------+

class apstools.callbacks.scan_signal_statistics.SignalStatsCallback

   Callback: Collect peak (& other) statistics during a scan.

   Caution:

     This is an early draft and is subject to change!

   Subscribe the "receiver()" method. Use with step scan plans such as
   "bp.scan()" and "bp.rel_scan()".

   Caution:

     It is recommended to subscribe this callback to specific plans.
     It should not be run with just any plan (it could easily raise
     exceptions).

   -[ Basic example ]-

      from bluesky import plans as bp
      from bluesky import preprocessors as bpp

      signal_stats = SignalStatsCallback()

      def my_plan(detectors, mover, rel_start, rel_stop, points, md={}):

          @bpp.subs_decorator(signal_stats.receiver)  # collect the data
          def _inner():
              yield from bp.rel_scan(detectors, mover, rel_start, rel_end, points, md)

          yield from _inner()  # run the scan
          signal_stats.report()  # print the statistics

   -[ Public API ]-

   +------------+--------------------------------------------------------------------------------------------+
   | "receiver  | Client method used to subscribe to the RunEngine.                                          |
   | "(key,     |                                                                                            |
   | document)  |                                                                                            |
   +------------+--------------------------------------------------------------------------------------------+
   | "report"() | Print a table with the collected statistics for each signal.                               |
   +------------+--------------------------------------------------------------------------------------------+
   | "data_str  | RunEngine document with signals to to watch.                                               |
   | eam"       |                                                                                            |
   +------------+--------------------------------------------------------------------------------------------+
   | "stop_rep  | If "True" (default), call the "report()" method when a "stop" document is received.        |
   | ort"       |                                                                                            |
   +------------+--------------------------------------------------------------------------------------------+

   -[ Internal API ]-

   +------------+--------------------------------------------------------------------------------------------+
   | "clear"()  | Clear the internal memory for the next run.                                                |
   +------------+--------------------------------------------------------------------------------------------+
   | "descript  | Receives 'descriptor' documents from the RunEngine.                                        |
   | or"(doc)   |                                                                                            |
   +------------+--------------------------------------------------------------------------------------------+
   | "event"(d  | Receives 'event' documents from the RunEngine.                                             |
   | oc)        |                                                                                            |
   +------------+--------------------------------------------------------------------------------------------+
   | "start"(d  | Receives 'start' documents from the RunEngine.                                             |
   | oc)        |                                                                                            |
   +------------+--------------------------------------------------------------------------------------------+
   | "stop"(do  | Receives 'stop' documents from the RunEngine.                                              |
   | c)         |                                                                                            |
   +------------+--------------------------------------------------------------------------------------------+
   | "_scannin  | Is a run *in progress*?                                                                    |
   | g"         |                                                                                            |
   +------------+--------------------------------------------------------------------------------------------+
   | "_registe  | Dictionary (keyed on Signal name) of "SummationRegister()" objects.                        |
   | rs"        |                                                                                            |
   +------------+--------------------------------------------------------------------------------------------+

   _registers: dict = {}

      Dictionary (keyed on Signal name) of "SummationRegister()"
      objects.

   _scanning: bool = False

      Is a run *in progress*?

   clear()

      Clear the internal memory for the next run.

   data_stream: str = 'primary'

      RunEngine document with signals to to watch.

   descriptor(doc)

      Receives 'descriptor' documents from the RunEngine.

   event(doc)

      Receives 'event' documents from the RunEngine.

   receiver(key, document)

      Client method used to subscribe to the RunEngine.

   report()

      Print a table with the collected statistics for each signal.

   start(doc)

      Receives 'start' documents from the RunEngine.

   stop(doc)

      Receives 'stop' documents from the RunEngine.

   stop_report: bool = True

      If "True" (default), call the "report()" method when a "stop"
      document is received.

apstools.callbacks.scan_signal_statistics.factor_fwhm = 2.3548200450309493

   FWHM =2\sqrt{2\ln{2}}\cdot\sigma_c

   see: https://statproofbook.github.io/P/norm-fwhm.html
